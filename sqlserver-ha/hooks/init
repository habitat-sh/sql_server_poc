# Progress Output looks strange emited by the supervisor
# so we will turn it off because some of the clustering
# commands print to the progress stream
$ProgressPreference="SilentlyContinue"

function Get-PopulationCount {
  $c = 0
  (iwr "http://${env:ComputerName}:9631/census" -UseBasicParsing | convertfrom-json).census_groups.{sqlserver-ha.default}.population.psobject.properties | % { $c++ }
  $c
}

# It will be usefull to pick a "primary" and list of all secondary members
# We will just choose the first member as primary since that will
# be the same on all instances
$members = @()
{{~#eachAlive svc.members as |m|}}
    $members += '{{m.sys.hostname}}'
{{~/eachAlive}}
$secondary = @()
$primary = $members[0]
if($members.Length -gt 1) {
    $secondary = $members[1..($members.Length-1)]
}

# To avoid coordinationi mishaps, we want to be sure that both primary and
# secondary nodes are up and running. In a freshly provisioned environment,
# there may be a delay (in minutes) bwtween nodes coming online. Ideally
# We should simply be able top see if $members has more than 1 node and then
# just sleep, because when the second node starts that SHOULD trigger a template
# rerendering and restart the service. There seems to be a bug where this is not
# happening. So we need to monitor the gateway API for census group population
# and then exit 1 when it becomes 2. Our provisioning script will then force a
# service reload and the templates will regenerate with both nodes present.
# Note that I have only been able to reproduce this bug in a newly provisioned
# environment.
if($members.length -lt 2) {
  while ((Get-PopulationCount) -lt 2) {
      Write-Host "Waiting for at least 2 sqlserver-ha nodes to show up in census..."
      Start-sleep -Seconds 5
  }
  Exit 1
}

Import-Module "{{pkgPathFor "core/dsc-core"}}/Modules/DscCore"

# Now we create the cluster and add ourself to it. These commands
# are all windows powershell only commands so we use Invoke-Command again.
# While one can use DSC to do all of this. That is awkward because we would
# have to pass our credentials (which should have AD admin rights) to the DSC
# because DSC runs under the machine account by default. By running the
# commands here instead, we can operate under our current identity.
Invoke-Command -ComputerName localhost -EnableNetworkAccess -ArgumentList (,($secondary + $primary)) {
    param ($nodes)
    $ProgressPreference="SilentlyContinue"

    $needToAddNode = $true
    $domain = (Get-ciminstance win32_computersystem).Domain.Split(".")[0]

    # running this hook on multiple nodes (why would you NOT?), you cannot
    # know who will create the cluster first or if it was created on a previous
    # 'hab svc load'
    if(!(Get-Cluster -Name {{cfg.cluster_name}} -Domain $domain)) {
        Write-Host "Creating new {{cfg.cluster_name}} cluster"
        $cluster = New-Cluster -Name {{cfg.cluster_name}} -Node $env:ComputerName -NoStorage -StaticAddress {{cfg.cluster_ip}} -ErrorAction SilentlyContinue
        if ($cluster) {
            # we got back a cluster object so we know we were succesful.
            # This also adds us to the cluster so we are basically done
            # and can flag ourselves as added.
            $needToAddNode = $false
            $cluster | Set-ClusterQuorum -FileShareWitness {{cfg.witness_path}}
        } else {
            # We did not get back a cluster object which means the command failed.
            # this most likely means that another node won the race and beat us to
            # creating the cluster but we should wait until we see that node
            # fully joined to the cluster
            Write-Host "Cluster already created"
            do {
                write-host "waiting for nodes to come online..."
                Start-Sleep -Seconds 5
            } until ($nodes | ? {  Get-ClusterNode -Cluster $_ -ErrorAction SilentlyContinue })
        }
    } else {
        Write-Host "Cluster {{cfg.cluster_name}} already created"
        # the cluster may have been created long ago in a previous 'hab svc load'
        # lets make sure we are not already a member, if so we flag ourself as joined
        if(Get-ClusterNode -Cluster $env:ComputerName -ErrorAction SilentlyContinue) {
            Write-Host "$env:ComputerName already added to cluster"
            $needToAddNode = $false
        }
    }

    if($needToAddNode) {
        Write-Host "Adding $env:ComputerName to cluster"
        # In azure we have to add the node and reference the
        # cluster by the name of one of the nodes already joined
        $node = $nodes | ? {  Get-ClusterNode -Cluster $_ -ErrorAction SilentlyContinue }
        Add-ClusterNode -Name $env:ComputerName -Cluster $node -NoStorage
    }
}

Start-Service 'MSSQL${{cfg.instance}}'
# use DSC to enable sql server always on
Start-DscCore (Join-Path {{pkg.svc_config_path}} feature.ps1) EnableAlwaysOn
